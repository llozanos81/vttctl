FROM alpine:3.22 AS build
ARG BUILD_VER
WORKDIR /home/foundry/vtt
COPY ./${BUILD_VER}/ .

# Install build dependencies and build from source if not x86_64
RUN set -xe \
    # Remove obsolete npmrc configs to avoid npm warnings
    && find / -name ".npmrc" -exec sed -i '/globalignorefile\|python/d' {} \; 2>/dev/null \
    && if [ "$(uname -m)" != "x86_64" ]; then \
           apk add --no-cache --update npm nodejs python3 make g++; \
           if [ -d resources/app/ ]; then \
               cd resources/app/; \
               npm install classic-level --build-from-source; \
           else \
               npm install classic-level --build-from-source; \
           fi; \
           # Optionally fix vulnerabilities (if safe)
           npm audit fix || true; \
           apk del npm python3 make g++ nodejs; \
           rm -rf /root/.npm /root/.cache /tmp/*; \
       fi

FROM alpine:3.22
ARG TIMEZONE
WORKDIR /home/foundry/vtt

# Install runtime dependencies only
RUN set -xe \
    # Remove obsolete npmrc configs to avoid npm warnings
    && find / -name ".npmrc" -exec sed -i '/globalignorefile\|python/d' {} \; 2>/dev/null \
    && export \
    && apk add --no-cache --update shadow nodejs icu-data-full npm tzdata \
    && addgroup -g 3000 -S foundry \
    && adduser -g 3000 -S foundry -G foundry \
    && usermod -u 3000 foundry \
    && npm install -g uuid@latest pm2 \
    && apk del --no-cache npm shadow \
    && mkdir -p /home/foundry/userdata \
    && chown -R foundry:foundry /home/foundry/ \
    && rm -rf /root/.npm /root/.cache /tmp/*

# Copy FoundryVTT files and set permissions for the foundry user
COPY --chown=foundry:foundry --from=build /home/foundry/vtt ./
USER foundry
RUN set -xe \
    && chmod +x /home/foundry/vtt/docker-entrypoint.sh \
    && touch /home/foundry/.firstboot

ENV TZ=${TIMEZONE}
EXPOSE 30000
ENTRYPOINT [ "/home/foundry/vtt/docker-entrypoint.sh" ]
