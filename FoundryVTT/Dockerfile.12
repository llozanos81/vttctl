FROM alpine:3.20 AS build
ARG BUILD_VER
WORKDIR /home/foundry/vtt
COPY ./${BUILD_VER}/ .

# Build from source if CPU arch is not x86_64
RUN set -xe \
    && if [ "$(uname -m)" != "x86_64" ]; then \
           apk add --no-cache --update npm nodejs python3 make g++; \
           cd resources/app/; \
           npm install classic-level --build-from-source;\
       fi 

FROM alpine:3.20
ARG TIMEZONE
WORKDIR /home/foundry/vtt

# Prepare FoundryVTT environment
RUN set -xe \
    && export \
    && apk add --no-cache --update shadow nodejs icu-data-full npm tzdata \
    && addgroup -g 3000 -S foundry \
    && adduser -g 3000 -S foundry -G foundry \
    && usermod -u 3000 foundry \
    && npm install -g uuid@latest \
    && npm install -g pm2 \
    && apk del --no-cache npm shadow \
    && mkdir -p /home/foundry/userdata \
    && chown -R foundry:foundry /home/foundry/

# Copy FoundryVTT files and set permissions for the foundry user
COPY --chown=foundry:foundry --from=build /home/foundry/vtt ./
USER foundry
RUN set -xe \
    && chmod +x /home/foundry/vtt/docker-entrypoint.sh \
    && touch /home/foundry/.firstboot

ENV TZ=${TIMEZONE}
EXPOSE 30000
ENTRYPOINT [ "/home/foundry/vtt/docker-entrypoint.sh" ]